package Bixi.sandbox;

/*Generated by MPS */

import javax.swing.JFrame;
import java.util.ArrayList;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Dimension;
import javax.swing.JPanel;
import java.awt.Graphics;
import java.awt.Color;
import javax.swing.JButton;

public class Valdor extends JFrame {
  public ArrayList<Valdor.Street> streets = new ArrayList<Valdor.Street>();
  public ArrayList<Valdor.Movement> movements = new ArrayList<Valdor.Movement>();
  public ArrayList<Valdor.BikeRack> racks = new ArrayList<Valdor.BikeRack>();
  public ArrayList<Valdor.Member> members = new ArrayList<Valdor.Member>();
  public int day = 7;
  public int time = 100;
  public boolean initialized = false;
  public boolean iterate = false;
  public static void main(String[] args) {
    Valdor n = new Valdor();
    n.initialize();
  }

  public void initialize() {
    streets.add(new Valdor.Street("Forest", 90));
    streets.add(new Valdor.Street("Dorion", 45));
    streets.add(new Valdor.Street("Dupuis", 73));
    streets.add(new Valdor.Street("Giguere", 9));
    streets.add(new Valdor.Street("Hotel-de-Ville", 30));
    streets.add(new Valdor.Street("Sabourin", 86));
    streets.add(new Valdor.Street("3rd", 15));
    streets.add(new Valdor.Street("Baie-Carriere", 25));
    members.add(new Valdor.Member(12, "Alec Parent"));
    members.add(new Valdor.Member(107, "Frederic Ladouceur"));
    members.add(new Valdor.Member(55, "Mushfique Rahman"));
    members.add(new Valdor.Member(90, "Gunter Mussbacher"));
    members.add(new Valdor.Member(11, "Chewbacca"));
    members.add(new Valdor.Member(45, "John Snow"));
    members.add(new Valdor.Member(88, "Doctor Who"));
    members.add(new Valdor.Member(3, "Ghandi"));
    Valdor.Street hStreet = null;
    Valdor.Street vStreet = null;
    for (Valdor.Street s : streets) {
      if ("Hotel-de-Ville".equals(s.name)) {
        hStreet = s;
      }
      if ("Baie-Carriere".equals(s.name)) {
        vStreet = s;
      }
      try {
        if (!(hStreet.equals(null)) && !(vStreet.equals(null))) {
          racks.add(new Valdor.BikeRack(12, 21, 4, hStreet, vStreet));
          hStreet = null;
          vStreet = null;
        }
      } catch (NullPointerException n) {
      }
    }
    for (Valdor.Street s : streets) {
      if ("Hotel-de-Ville".equals(s.name)) {
        hStreet = s;
      }
      if ("Sabourin".equals(s.name)) {
        vStreet = s;
      }
      try {
        if (!(hStreet.equals(null)) && !(vStreet.equals(null))) {
          racks.add(new Valdor.BikeRack(2, 17, 1, hStreet, vStreet));
          hStreet = null;
          vStreet = null;
        }
      } catch (NullPointerException n) {
      }
    }
    for (Valdor.Street s : streets) {
      if ("3rd".equals(s.name)) {
        hStreet = s;
      }
      if ("Dupuis".equals(s.name)) {
        vStreet = s;
      }
      try {
        if (!(hStreet.equals(null)) && !(vStreet.equals(null))) {
          racks.add(new Valdor.BikeRack(1, 13, 2, hStreet, vStreet));
          hStreet = null;
          vStreet = null;
        }
      } catch (NullPointerException n) {
      }
    }
    for (Valdor.Street s : streets) {
      if ("Forest".equals(s.name)) {
        hStreet = s;
      }
      if ("Giguere".equals(s.name)) {
        vStreet = s;
      }
      try {
        if (!(hStreet.equals(null)) && !(vStreet.equals(null))) {
          racks.add(new Valdor.BikeRack(4, 7, 3, hStreet, vStreet));
          hStreet = null;
          vStreet = null;
        }
      } catch (NullPointerException n) {
      }
    }
    Valdor.BikeRack source = null;
    Valdor.BikeRack target = null;
    Valdor.Member member = null;
    boolean movementInserted = false;
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("3rd") && r.vStreet.name.equals("Dupuis") && r.quadrant == 2) {
        source = r;
      }
      if (r.hStreet.name.equals("Forest") && r.vStreet.name.equals("Giguere") && r.quadrant == 3) {
        target = r;
      }

      for (Valdor.Member m : members) {
        if (m.ID == 12) {
          member = m;
        }
        try {
          if (!(source.equals(null)) && !(target.equals(null)) && !(member.equals(null))) {
            movements.add(new Valdor.MemberMovement(member, 1, 12, 1, source, target));
            source = null;
            target = null;
            member = null;
            movementInserted = true;
            break;
          }
        } catch (NullPointerException n) {
        }
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Forest") && r.vStreet.name.equals("Giguere") && r.quadrant == 3) {
        source = r;
      }
      if (r.hStreet.name.equals("Forest") && r.vStreet.name.equals("Giguere") && r.quadrant == 3) {
        target = r;
      }

      for (Valdor.Member m : members) {
        if (m.ID == 12) {
          member = m;
        }
        try {
          if (!(source.equals(null)) && !(target.equals(null)) && !(member.equals(null))) {
            movements.add(new Valdor.MemberMovement(member, 2, 16, 1, source, target));
            source = null;
            target = null;
            member = null;
            movementInserted = true;
            break;
          }
        } catch (NullPointerException n) {
        }
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Forest") && r.vStreet.name.equals("Giguere") && r.quadrant == 3) {
        source = r;
      }
      if (r.hStreet.name.equals("3rd") && r.vStreet.name.equals("Dupuis") && r.quadrant == 2) {
        target = r;
      }

      for (Valdor.Member m : members) {
        if (m.ID == 12) {
          member = m;
        }
        try {
          if (!(source.equals(null)) && !(target.equals(null)) && !(member.equals(null))) {
            movements.add(new Valdor.MemberMovement(member, 3, 8, 1, source, target));
            source = null;
            target = null;
            member = null;
            movementInserted = true;
            break;
          }
        } catch (NullPointerException n) {
        }
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Baie-Carriere") && r.quadrant == 4) {
        source = r;
      }
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Baie-Carriere") && r.quadrant == 4) {
        target = r;
      }

      for (Valdor.Member m : members) {
        if (m.ID == 11) {
          member = m;
        }
        try {
          if (!(source.equals(null)) && !(target.equals(null)) && !(member.equals(null))) {
            movements.add(new Valdor.MemberMovement(member, 1, 0, 1, source, target));
            source = null;
            target = null;
            member = null;
            movementInserted = true;
            break;
          }
        } catch (NullPointerException n) {
        }
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("3rd") && r.vStreet.name.equals("Dupuis") && r.quadrant == 2) {
        source = r;
      }
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Sabourin") && r.quadrant == 1) {
        target = r;
      }

      for (Valdor.Member m : members) {
        if (m.ID == 11) {
          member = m;
        }
        try {
          if (!(source.equals(null)) && !(target.equals(null)) && !(member.equals(null))) {
            movements.add(new Valdor.MemberMovement(member, 2, 12, 1, source, target));
            source = null;
            target = null;
            member = null;
            movementInserted = true;
            break;
          }
        } catch (NullPointerException n) {
        }
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Sabourin") && r.quadrant == 1) {
        source = r;
      }
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Baie-Carriere") && r.quadrant == 4) {
        target = r;
      }

      for (Valdor.Member m : members) {
        if (m.ID == 11) {
          member = m;
        }
        try {
          if (!(source.equals(null)) && !(target.equals(null)) && !(member.equals(null))) {
            movements.add(new Valdor.MemberMovement(member, 3, 20, 1, source, target));
            source = null;
            target = null;
            member = null;
            movementInserted = true;
            break;
          }
        } catch (NullPointerException n) {
        }
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Sabourin") && r.quadrant == 1) {
        source = r;
      }
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Baie-Carriere") && r.quadrant == 4) {
        target = r;
      }

      for (Valdor.Member m : members) {
        if (m.ID == 88) {
          member = m;
        }
        try {
          if (!(source.equals(null)) && !(target.equals(null)) && !(member.equals(null))) {
            movements.add(new Valdor.MemberMovement(member, 1, 8, 1, source, target));
            source = null;
            target = null;
            member = null;
            movementInserted = true;
            break;
          }
        } catch (NullPointerException n) {
        }
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Forest") && r.vStreet.name.equals("Giguere") && r.quadrant == 3) {
        source = r;
      }
      if (r.hStreet.name.equals("3rd") && r.vStreet.name.equals("Dupuis") && r.quadrant == 2) {
        target = r;
      }

      for (Valdor.Member m : members) {
        if (m.ID == 88) {
          member = m;
        }
        try {
          if (!(source.equals(null)) && !(target.equals(null)) && !(member.equals(null))) {
            movements.add(new Valdor.MemberMovement(member, 2, 12, 1, source, target));
            source = null;
            target = null;
            member = null;
            movementInserted = true;
            break;
          }
        } catch (NullPointerException n) {
        }
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("3rd") && r.vStreet.name.equals("Dupuis") && r.quadrant == 2) {
        source = r;
      }
      if (r.hStreet.name.equals("Forest") && r.vStreet.name.equals("Giguere") && r.quadrant == 3) {
        target = r;
      }

      for (Valdor.Member m : members) {
        if (m.ID == 88) {
          member = m;
        }
        try {
          if (!(source.equals(null)) && !(target.equals(null)) && !(member.equals(null))) {
            movements.add(new Valdor.MemberMovement(member, 3, 12, 1, source, target));
            source = null;
            target = null;
            member = null;
            movementInserted = true;
            break;
          }
        } catch (NullPointerException n) {
        }
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Baie-Carriere") && r.quadrant == 4) {
        source = r;
      }
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Sabourin") && r.quadrant == 1) {
        target = r;
      }

      for (Valdor.Member m : members) {
        if (m.ID == 107) {
          member = m;
        }
        try {
          if (!(source.equals(null)) && !(target.equals(null)) && !(member.equals(null))) {
            movements.add(new Valdor.MemberMovement(member, 1, 20, 1, source, target));
            source = null;
            target = null;
            member = null;
            movementInserted = true;
            break;
          }
        } catch (NullPointerException n) {
        }
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Baie-Carriere") && r.quadrant == 4) {
        source = r;
      }
      if (r.hStreet.name.equals("Forest") && r.vStreet.name.equals("Giguere") && r.quadrant == 3) {
        target = r;
      }

      for (Valdor.Member m : members) {
        if (m.ID == 107) {
          member = m;
        }
        try {
          if (!(source.equals(null)) && !(target.equals(null)) && !(member.equals(null))) {
            movements.add(new Valdor.MemberMovement(member, 2, 4, 1, source, target));
            source = null;
            target = null;
            member = null;
            movementInserted = true;
            break;
          }
        } catch (NullPointerException n) {
        }
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Baie-Carriere") && r.quadrant == 4) {
        source = r;
      }
      if (r.hStreet.name.equals("3rd") && r.vStreet.name.equals("Dupuis") && r.quadrant == 2) {
        target = r;
      }

      for (Valdor.Member m : members) {
        if (m.ID == 107) {
          member = m;
        }
        try {
          if (!(source.equals(null)) && !(target.equals(null)) && !(member.equals(null))) {
            movements.add(new Valdor.MemberMovement(member, 3, 0, 1, source, target));
            source = null;
            target = null;
            member = null;
            movementInserted = true;
            break;
          }
        } catch (NullPointerException n) {
        }
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Sabourin") && r.quadrant == 1) {
        source = r;
      }
      if (r.hStreet.name.equals("Forest") && r.vStreet.name.equals("Giguere") && r.quadrant == 3) {
        target = r;
      }

      for (Valdor.Member m : members) {
        if (m.ID == 3) {
          member = m;
        }
        try {
          if (!(source.equals(null)) && !(target.equals(null)) && !(member.equals(null))) {
            movements.add(new Valdor.MemberMovement(member, 1, 16, 1, source, target));
            source = null;
            target = null;
            member = null;
            movementInserted = true;
            break;
          }
        } catch (NullPointerException n) {
        }
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Baie-Carriere") && r.quadrant == 4) {
        source = r;
      }
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Sabourin") && r.quadrant == 1) {
        target = r;
      }

      for (Valdor.Member m : members) {
        if (m.ID == 3) {
          member = m;
        }
        try {
          if (!(source.equals(null)) && !(target.equals(null)) && !(member.equals(null))) {
            movements.add(new Valdor.MemberMovement(member, 2, 0, 1, source, target));
            source = null;
            target = null;
            member = null;
            movementInserted = true;
            break;
          }
        } catch (NullPointerException n) {
        }
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("3rd") && r.vStreet.name.equals("Dupuis") && r.quadrant == 2) {
        source = r;
      }
      if (r.hStreet.name.equals("Forest") && r.vStreet.name.equals("Giguere") && r.quadrant == 3) {
        target = r;
      }

      for (Valdor.Member m : members) {
        if (m.ID == 3) {
          member = m;
        }
        try {
          if (!(source.equals(null)) && !(target.equals(null)) && !(member.equals(null))) {
            movements.add(new Valdor.MemberMovement(member, 3, 20, 1, source, target));
            source = null;
            target = null;
            member = null;
            movementInserted = true;
            break;
          }
        } catch (NullPointerException n) {
        }
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Baie-Carriere") && r.quadrant == 4) {
        source = r;
      }
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Sabourin") && r.quadrant == 1) {
        target = r;
      }

      for (Valdor.Member m : members) {
        if (m.ID == 90) {
          member = m;
        }
        try {
          if (!(source.equals(null)) && !(target.equals(null)) && !(member.equals(null))) {
            movements.add(new Valdor.MemberMovement(member, 1, 4, 1, source, target));
            source = null;
            target = null;
            member = null;
            movementInserted = true;
            break;
          }
        } catch (NullPointerException n) {
        }
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Baie-Carriere") && r.quadrant == 4) {
        source = r;
      }
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Baie-Carriere") && r.quadrant == 4) {
        target = r;
      }

      for (Valdor.Member m : members) {
        if (m.ID == 90) {
          member = m;
        }
        try {
          if (!(source.equals(null)) && !(target.equals(null)) && !(member.equals(null))) {
            movements.add(new Valdor.MemberMovement(member, 2, 4, 1, source, target));
            source = null;
            target = null;
            member = null;
            movementInserted = true;
            break;
          }
        } catch (NullPointerException n) {
        }
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Baie-Carriere") && r.quadrant == 4) {
        source = r;
      }
      if (r.hStreet.name.equals("3rd") && r.vStreet.name.equals("Dupuis") && r.quadrant == 2) {
        target = r;
      }

      for (Valdor.Member m : members) {
        if (m.ID == 90) {
          member = m;
        }
        try {
          if (!(source.equals(null)) && !(target.equals(null)) && !(member.equals(null))) {
            movements.add(new Valdor.MemberMovement(member, 3, 12, 1, source, target));
            source = null;
            target = null;
            member = null;
            movementInserted = true;
            break;
          }
        } catch (NullPointerException n) {
        }
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Baie-Carriere") && r.quadrant == 4) {
        source = r;
      }
      if (r.hStreet.name.equals("3rd") && r.vStreet.name.equals("Dupuis") && r.quadrant == 2) {
        target = r;
      }

      for (Valdor.Member m : members) {
        if (m.ID == 45) {
          member = m;
        }
        try {
          if (!(source.equals(null)) && !(target.equals(null)) && !(member.equals(null))) {
            movements.add(new Valdor.MemberMovement(member, 1, 4, 1, source, target));
            source = null;
            target = null;
            member = null;
            movementInserted = true;
            break;
          }
        } catch (NullPointerException n) {
        }
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("3rd") && r.vStreet.name.equals("Dupuis") && r.quadrant == 2) {
        source = r;
      }
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Baie-Carriere") && r.quadrant == 4) {
        target = r;
      }

      for (Valdor.Member m : members) {
        if (m.ID == 45) {
          member = m;
        }
        try {
          if (!(source.equals(null)) && !(target.equals(null)) && !(member.equals(null))) {
            movements.add(new Valdor.MemberMovement(member, 2, 20, 1, source, target));
            source = null;
            target = null;
            member = null;
            movementInserted = true;
            break;
          }
        } catch (NullPointerException n) {
        }
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Baie-Carriere") && r.quadrant == 4) {
        source = r;
      }
      if (r.hStreet.name.equals("3rd") && r.vStreet.name.equals("Dupuis") && r.quadrant == 2) {
        target = r;
      }

      for (Valdor.Member m : members) {
        if (m.ID == 45) {
          member = m;
        }
        try {
          if (!(source.equals(null)) && !(target.equals(null)) && !(member.equals(null))) {
            movements.add(new Valdor.MemberMovement(member, 3, 12, 1, source, target));
            source = null;
            target = null;
            member = null;
            movementInserted = true;
            break;
          }
        } catch (NullPointerException n) {
        }
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Sabourin") && r.quadrant == 1) {
        source = r;
      }
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Baie-Carriere") && r.quadrant == 4) {
        target = r;
      }

      for (Valdor.Member m : members) {
        if (m.ID == 55) {
          member = m;
        }
        try {
          if (!(source.equals(null)) && !(target.equals(null)) && !(member.equals(null))) {
            movements.add(new Valdor.MemberMovement(member, 1, 4, 1, source, target));
            source = null;
            target = null;
            member = null;
            movementInserted = true;
            break;
          }
        } catch (NullPointerException n) {
        }
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Sabourin") && r.quadrant == 1) {
        source = r;
      }
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Baie-Carriere") && r.quadrant == 4) {
        target = r;
      }

      for (Valdor.Member m : members) {
        if (m.ID == 55) {
          member = m;
        }
        try {
          if (!(source.equals(null)) && !(target.equals(null)) && !(member.equals(null))) {
            movements.add(new Valdor.MemberMovement(member, 2, 12, 1, source, target));
            source = null;
            target = null;
            member = null;
            movementInserted = true;
            break;
          }
        } catch (NullPointerException n) {
        }
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("3rd") && r.vStreet.name.equals("Dupuis") && r.quadrant == 2) {
        source = r;
      }
      if (r.hStreet.name.equals("Forest") && r.vStreet.name.equals("Giguere") && r.quadrant == 3) {
        target = r;
      }

      for (Valdor.Member m : members) {
        if (m.ID == 55) {
          member = m;
        }
        try {
          if (!(source.equals(null)) && !(target.equals(null)) && !(member.equals(null))) {
            movements.add(new Valdor.MemberMovement(member, 3, 20, 1, source, target));
            source = null;
            target = null;
            member = null;
            movementInserted = true;
            break;
          }
        } catch (NullPointerException n) {
        }
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Forest") && r.vStreet.name.equals("Giguere") && r.quadrant == 3) {
        source = r;
      }
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Sabourin") && r.quadrant == 1) {
        target = r;
      }

      try {
        if (!(source.equals(null)) && !(target.equals(null))) {
          movements.add(new Valdor.RandomMovement(1, 0, 5, source, target));
          source = null;
          target = null;
          member = null;
          movementInserted = true;
          break;
        }
      } catch (NullPointerException n) {
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Forest") && r.vStreet.name.equals("Giguere") && r.quadrant == 3) {
        source = r;
      }
      if (r.hStreet.name.equals("3rd") && r.vStreet.name.equals("Dupuis") && r.quadrant == 2) {
        target = r;
      }

      try {
        if (!(source.equals(null)) && !(target.equals(null))) {
          movements.add(new Valdor.RandomMovement(1, 0, 2, source, target));
          source = null;
          target = null;
          member = null;
          movementInserted = true;
          break;
        }
      } catch (NullPointerException n) {
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Forest") && r.vStreet.name.equals("Giguere") && r.quadrant == 3) {
        source = r;
      }
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Sabourin") && r.quadrant == 1) {
        target = r;
      }

      try {
        if (!(source.equals(null)) && !(target.equals(null))) {
          movements.add(new Valdor.RandomMovement(1, 20, 3, source, target));
          source = null;
          target = null;
          member = null;
          movementInserted = true;
          break;
        }
      } catch (NullPointerException n) {
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Baie-Carriere") && r.quadrant == 4) {
        source = r;
      }
      if (r.hStreet.name.equals("Forest") && r.vStreet.name.equals("Giguere") && r.quadrant == 3) {
        target = r;
      }

      try {
        if (!(source.equals(null)) && !(target.equals(null))) {
          movements.add(new Valdor.RandomMovement(1, 12, 2, source, target));
          source = null;
          target = null;
          member = null;
          movementInserted = true;
          break;
        }
      } catch (NullPointerException n) {
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Forest") && r.vStreet.name.equals("Giguere") && r.quadrant == 3) {
        source = r;
      }
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Baie-Carriere") && r.quadrant == 4) {
        target = r;
      }

      try {
        if (!(source.equals(null)) && !(target.equals(null))) {
          movements.add(new Valdor.RandomMovement(2, 16, 2, source, target));
          source = null;
          target = null;
          member = null;
          movementInserted = true;
          break;
        }
      } catch (NullPointerException n) {
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("3rd") && r.vStreet.name.equals("Dupuis") && r.quadrant == 2) {
        source = r;
      }
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Baie-Carriere") && r.quadrant == 4) {
        target = r;
      }

      try {
        if (!(source.equals(null)) && !(target.equals(null))) {
          movements.add(new Valdor.RandomMovement(2, 0, 6, source, target));
          source = null;
          target = null;
          member = null;
          movementInserted = true;
          break;
        }
      } catch (NullPointerException n) {
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Sabourin") && r.quadrant == 1) {
        source = r;
      }
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Baie-Carriere") && r.quadrant == 4) {
        target = r;
      }

      try {
        if (!(source.equals(null)) && !(target.equals(null))) {
          movements.add(new Valdor.RandomMovement(2, 16, 5, source, target));
          source = null;
          target = null;
          member = null;
          movementInserted = true;
          break;
        }
      } catch (NullPointerException n) {
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Baie-Carriere") && r.quadrant == 4) {
        source = r;
      }
      if (r.hStreet.name.equals("Forest") && r.vStreet.name.equals("Giguere") && r.quadrant == 3) {
        target = r;
      }

      try {
        if (!(source.equals(null)) && !(target.equals(null))) {
          movements.add(new Valdor.RandomMovement(3, 16, 4, source, target));
          source = null;
          target = null;
          member = null;
          movementInserted = true;
          break;
        }
      } catch (NullPointerException n) {
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("3rd") && r.vStreet.name.equals("Dupuis") && r.quadrant == 2) {
        source = r;
      }
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Baie-Carriere") && r.quadrant == 4) {
        target = r;
      }

      try {
        if (!(source.equals(null)) && !(target.equals(null))) {
          movements.add(new Valdor.RandomMovement(3, 20, 2, source, target));
          source = null;
          target = null;
          member = null;
          movementInserted = true;
          break;
        }
      } catch (NullPointerException n) {
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("3rd") && r.vStreet.name.equals("Dupuis") && r.quadrant == 2) {
        source = r;
      }
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Baie-Carriere") && r.quadrant == 4) {
        target = r;
      }

      try {
        if (!(source.equals(null)) && !(target.equals(null))) {
          movements.add(new Valdor.RandomMovement(3, 20, 3, source, target));
          source = null;
          target = null;
          member = null;
          movementInserted = true;
          break;
        }
      } catch (NullPointerException n) {
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Sabourin") && r.quadrant == 1) {
        source = r;
      }
      if (r.hStreet.name.equals("3rd") && r.vStreet.name.equals("Dupuis") && r.quadrant == 2) {
        target = r;
      }

      try {
        if (!(source.equals(null)) && !(target.equals(null))) {
          movements.add(new Valdor.Redistribution(1, 20, 4, source, target));
          source = null;
          target = null;
          member = null;
          movementInserted = true;
          break;
        }
      } catch (NullPointerException n) {
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("3rd") && r.vStreet.name.equals("Dupuis") && r.quadrant == 2) {
        source = r;
      }
      if (r.hStreet.name.equals("Forest") && r.vStreet.name.equals("Giguere") && r.quadrant == 3) {
        target = r;
      }

      try {
        if (!(source.equals(null)) && !(target.equals(null))) {
          movements.add(new Valdor.Redistribution(1, 20, 5, source, target));
          source = null;
          target = null;
          member = null;
          movementInserted = true;
          break;
        }
      } catch (NullPointerException n) {
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Forest") && r.vStreet.name.equals("Giguere") && r.quadrant == 3) {
        source = r;
      }
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Baie-Carriere") && r.quadrant == 4) {
        target = r;
      }

      try {
        if (!(source.equals(null)) && !(target.equals(null))) {
          movements.add(new Valdor.Redistribution(1, 4, 3, source, target));
          source = null;
          target = null;
          member = null;
          movementInserted = true;
          break;
        }
      } catch (NullPointerException n) {
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Baie-Carriere") && r.quadrant == 4) {
        source = r;
      }
      if (r.hStreet.name.equals("3rd") && r.vStreet.name.equals("Dupuis") && r.quadrant == 2) {
        target = r;
      }

      try {
        if (!(source.equals(null)) && !(target.equals(null))) {
          movements.add(new Valdor.Redistribution(2, 8, 4, source, target));
          source = null;
          target = null;
          member = null;
          movementInserted = true;
          break;
        }
      } catch (NullPointerException n) {
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Baie-Carriere") && r.quadrant == 4) {
        source = r;
      }
      if (r.hStreet.name.equals("3rd") && r.vStreet.name.equals("Dupuis") && r.quadrant == 2) {
        target = r;
      }

      try {
        if (!(source.equals(null)) && !(target.equals(null))) {
          movements.add(new Valdor.Redistribution(2, 16, 5, source, target));
          source = null;
          target = null;
          member = null;
          movementInserted = true;
          break;
        }
      } catch (NullPointerException n) {
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Forest") && r.vStreet.name.equals("Giguere") && r.quadrant == 3) {
        source = r;
      }
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Baie-Carriere") && r.quadrant == 4) {
        target = r;
      }

      try {
        if (!(source.equals(null)) && !(target.equals(null))) {
          movements.add(new Valdor.Redistribution(2, 12, 6, source, target));
          source = null;
          target = null;
          member = null;
          movementInserted = true;
          break;
        }
      } catch (NullPointerException n) {
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Baie-Carriere") && r.quadrant == 4) {
        source = r;
      }
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Sabourin") && r.quadrant == 1) {
        target = r;
      }

      try {
        if (!(source.equals(null)) && !(target.equals(null))) {
          movements.add(new Valdor.Redistribution(3, 8, 3, source, target));
          source = null;
          target = null;
          member = null;
          movementInserted = true;
          break;
        }
      } catch (NullPointerException n) {
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("3rd") && r.vStreet.name.equals("Dupuis") && r.quadrant == 2) {
        source = r;
      }
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Sabourin") && r.quadrant == 1) {
        target = r;
      }

      try {
        if (!(source.equals(null)) && !(target.equals(null))) {
          movements.add(new Valdor.Redistribution(3, 8, 5, source, target));
          source = null;
          target = null;
          member = null;
          movementInserted = true;
          break;
        }
      } catch (NullPointerException n) {
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }
    for (Valdor.BikeRack r : racks) {
      if (r.hStreet.name.equals("Forest") && r.vStreet.name.equals("Giguere") && r.quadrant == 3) {
        source = r;
      }
      if (r.hStreet.name.equals("Hotel-de-Ville") && r.vStreet.name.equals("Sabourin") && r.quadrant == 1) {
        target = r;
      }

      try {
        if (!(source.equals(null)) && !(target.equals(null))) {
          movements.add(new Valdor.Redistribution(3, 12, 6, source, target));
          source = null;
          target = null;
          member = null;
          movementInserted = true;
          break;
        }
      } catch (NullPointerException n) {
      }
      if (movementInserted) {
        movementInserted = false;
        break;
      }
    }

    for (Valdor.Movement m : movements) {
      if (m.dayOfWeek <= day) {
        if (m.timeSlot < time) {
          day = m.dayOfWeek;
          time = m.timeSlot;
        }
      }
    }
    initialized = true;
    panel.repaint();
    this.setTitle("Valdor");
    this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    this.add(panel);
    button.setAlignmentX(LEFT_ALIGNMENT);
    button.setAlignmentY(TOP_ALIGNMENT);
    button.addActionListener(new ActionListener() {
      public void actionPerformed(ActionEvent p0) {
        executeMovements();
      }
    });
    panel.add(button);
    panel.setPreferredSize(new Dimension(500, 500));
    this.pack();
    this.setVisible(true);
  }

  private JPanel panel = new JPanel() {
    @Override
    public void paintComponent(Graphics graphics) {
      super.paintComponent(graphics);
      setBackground(Color.WHITE);
      if (!(initialized)) {
        graphics.setColor(Color.black);
        graphics.drawLine(3 * 5, 90 * 5, 100 * 5, 90 * 5);
        graphics.drawString("Forest", (((3 + 100) / 2) + 2) * 5, (90 + 2) * 5);
        graphics.setColor(Color.black);
        graphics.drawLine(45 * 5, 10 * 5, 45 * 5, 95 * 5);
        graphics.drawString("Dorion", (45 + 2) * 5, (((10 + 95) / 2) + 2) * 5);
        graphics.setColor(Color.black);
        graphics.drawLine(73 * 5, 15 * 5, 73 * 5, 100 * 5);
        graphics.drawString("Dupuis", (73 + 2) * 5, (((15 + 100) / 2) + 2) * 5);
        graphics.setColor(Color.black);
        graphics.drawLine(9 * 5, 0 * 5, 9 * 5, 100 * 5);
        graphics.drawString("Giguere", (9 + 2) * 5, (((0 + 100) / 2) + 2) * 5);
        graphics.setColor(Color.black);
        graphics.drawLine(25 * 5, 30 * 5, 86 * 5, 30 * 5);
        graphics.drawString("Hotel-de-Ville", (((25 + 86) / 2) + 2) * 5, (30 + 2) * 5);
        graphics.setColor(Color.black);
        graphics.drawLine(86 * 5, 15 * 5, 86 * 5, 100 * 5);
        graphics.drawString("Sabourin", (86 + 2) * 5, (((15 + 100) / 2) + 2) * 5);
        graphics.setColor(Color.black);
        graphics.drawLine(0 * 5, 15 * 5, 100 * 5, 15 * 5);
        graphics.drawString("3rd", (((0 + 100) / 2) + 2) * 5, (15 + 2) * 5);
        graphics.setColor(Color.black);
        graphics.drawLine(25 * 5, 15 * 5, 25 * 5, 100 * 5);
        graphics.drawString("Baie-Carriere", (25 + 2) * 5, (((15 + 100) / 2) + 2) * 5);
        graphics.setColor(Color.black);
        if (12 < 0 || 12 > 21) {
          graphics.setColor(Color.red);
        }
        graphics.drawOval((25 + 2) * 5, (30 + 2) * 5, 3, 3);
        graphics.drawString(12 + "/" + 21, (25 + 3) * 5, (30 + 6) * 5);
        graphics.setColor(Color.black);
        if (2 < 0 || 2 > 17) {
          graphics.setColor(Color.red);
        }
        graphics.drawOval((86 + 2) * 5, (30 - 2) * 5, 3, 3);
        graphics.drawString(2 + "/" + 17, (86 + 3) * 5, (30 - 3) * 5);
        graphics.setColor(Color.black);
        if (1 < 0 || 1 > 13) {
          graphics.setColor(Color.red);
        }
        graphics.drawOval((73 - 2) * 5, (15 - 2) * 5, 3, 3);
        graphics.drawString(1 + "/" + 13, (73 - 8) * 5, (15 - 3) * 5);
        graphics.setColor(Color.black);
        if (4 < 0 || 4 > 7) {
          graphics.setColor(Color.red);
        }
        graphics.drawOval((9 - 2) * 5, (90 + 2) * 5, 3, 3);
        graphics.drawString(4 + "/" + 7, (9 - 8) * 5, (90 + 6) * 5);
      }
      if (initialized && !(iterate)) {
        String sDay = "Sunday";
        String sTime = "Evening";
        if (day == 1) {
          sDay = "Monday";
        }
        if (day == 2) {
          sDay = "Tuesday";
        }
        if (day == 3) {
          sDay = "Wednesday";
        }
        if (day == 4) {
          sDay = "Thursday";
        }
        if (day == 5) {
          sDay = "Friday";
        }
        if (day == 6) {
          sDay = "Saturday";
        }
        if (time == 0) {
          sTime = "Night";
        }
        if (time == 4) {
          sTime = "Early Morning";
        }
        if (time == 8) {
          sTime = "Morning";
        }
        if (time == 12) {
          sTime = "Midday";
        }
        if (time == 16) {
          sTime = "Afternoon";
        }
        graphics.drawString(sDay + ", " + sTime, 300, 20);
        graphics.setColor(Color.black);
        graphics.drawLine(3 * 5, 90 * 5, 100 * 5, 90 * 5);
        graphics.drawString("Forest", (((3 + 100) / 2) + 2) * 5, (90 + 2) * 5);
        graphics.setColor(Color.black);
        graphics.drawLine(45 * 5, 10 * 5, 45 * 5, 95 * 5);
        graphics.drawString("Dorion", (45 + 2) * 5, (((10 + 95) / 2) + 2) * 5);
        graphics.setColor(Color.black);
        graphics.drawLine(73 * 5, 15 * 5, 73 * 5, 100 * 5);
        graphics.drawString("Dupuis", (73 + 2) * 5, (((15 + 100) / 2) + 2) * 5);
        graphics.setColor(Color.black);
        graphics.drawLine(9 * 5, 0 * 5, 9 * 5, 100 * 5);
        graphics.drawString("Giguere", (9 + 2) * 5, (((0 + 100) / 2) + 2) * 5);
        graphics.setColor(Color.black);
        graphics.drawLine(25 * 5, 30 * 5, 86 * 5, 30 * 5);
        graphics.drawString("Hotel-de-Ville", (((25 + 86) / 2) + 2) * 5, (30 + 2) * 5);
        graphics.setColor(Color.black);
        graphics.drawLine(86 * 5, 15 * 5, 86 * 5, 100 * 5);
        graphics.drawString("Sabourin", (86 + 2) * 5, (((15 + 100) / 2) + 2) * 5);
        graphics.setColor(Color.black);
        graphics.drawLine(0 * 5, 15 * 5, 100 * 5, 15 * 5);
        graphics.drawString("3rd", (((0 + 100) / 2) + 2) * 5, (15 + 2) * 5);
        graphics.setColor(Color.black);
        graphics.drawLine(25 * 5, 15 * 5, 25 * 5, 100 * 5);
        graphics.drawString("Baie-Carriere", (25 + 2) * 5, (((15 + 100) / 2) + 2) * 5);
        graphics.setColor(Color.black);
        if (12 < 0 || 12 > 21) {
          graphics.setColor(Color.red);
        }
        graphics.drawOval((25 + 2) * 5, (30 + 2) * 5, 3, 3);
        graphics.drawString(12 + "/" + 21, (25 + 3) * 5, (30 + 6) * 5);
        graphics.setColor(Color.black);
        if (2 < 0 || 2 > 17) {
          graphics.setColor(Color.red);
        }
        graphics.drawOval((86 + 2) * 5, (30 - 2) * 5, 3, 3);
        graphics.drawString(2 + "/" + 17, (86 + 3) * 5, (30 - 3) * 5);
        graphics.setColor(Color.black);
        if (1 < 0 || 1 > 13) {
          graphics.setColor(Color.red);
        }
        graphics.drawOval((73 - 2) * 5, (15 - 2) * 5, 3, 3);
        graphics.drawString(1 + "/" + 13, (73 - 8) * 5, (15 - 3) * 5);
        graphics.setColor(Color.black);
        if (4 < 0 || 4 > 7) {
          graphics.setColor(Color.red);
        }
        graphics.drawOval((9 - 2) * 5, (90 + 2) * 5, 3, 3);
        graphics.drawString(4 + "/" + 7, (9 - 8) * 5, (90 + 6) * 5);
      }
      if (initialized && iterate) {
        graphics.setColor(Color.black);
        graphics.drawLine(3 * 5, 90 * 5, 100 * 5, 90 * 5);
        graphics.drawString("Forest", (((3 + 100) / 2) + 2) * 5, (90 + 2) * 5);
        graphics.setColor(Color.black);
        graphics.drawLine(45 * 5, 10 * 5, 45 * 5, 95 * 5);
        graphics.drawString("Dorion", (45 + 2) * 5, (((10 + 95) / 2) + 2) * 5);
        graphics.setColor(Color.black);
        graphics.drawLine(73 * 5, 15 * 5, 73 * 5, 100 * 5);
        graphics.drawString("Dupuis", (73 + 2) * 5, (((15 + 100) / 2) + 2) * 5);
        graphics.setColor(Color.black);
        graphics.drawLine(9 * 5, 0 * 5, 9 * 5, 100 * 5);
        graphics.drawString("Giguere", (9 + 2) * 5, (((0 + 100) / 2) + 2) * 5);
        graphics.setColor(Color.black);
        graphics.drawLine(25 * 5, 30 * 5, 86 * 5, 30 * 5);
        graphics.drawString("Hotel-de-Ville", (((25 + 86) / 2) + 2) * 5, (30 + 2) * 5);
        graphics.setColor(Color.black);
        graphics.drawLine(86 * 5, 15 * 5, 86 * 5, 100 * 5);
        graphics.drawString("Sabourin", (86 + 2) * 5, (((15 + 100) / 2) + 2) * 5);
        graphics.setColor(Color.black);
        graphics.drawLine(0 * 5, 15 * 5, 100 * 5, 15 * 5);
        graphics.drawString("3rd", (((0 + 100) / 2) + 2) * 5, (15 + 2) * 5);
        graphics.setColor(Color.black);
        graphics.drawLine(25 * 5, 15 * 5, 25 * 5, 100 * 5);
        graphics.drawString("Baie-Carriere", (25 + 2) * 5, (((15 + 100) / 2) + 2) * 5);
        for (Valdor.BikeRack r : racks) {
          graphics.setColor(Color.black);
          if (r.quadrant == 1) {
            if (r.numberOfBikes < 0 || r.numberOfBikes > r.limit) {
              graphics.setColor(Color.red);
            }
            graphics.drawOval((r.vStreet.placement + 2) * 5, (r.hStreet.placement - 2) * 5, 3, 3);
            graphics.drawString(r.numberOfBikes + "/" + r.limit, (r.vStreet.placement + 3) * 5, (r.hStreet.placement - 3) * 5);
          }
          if (r.quadrant == 2) {
            if (r.numberOfBikes < 0 || r.numberOfBikes > r.limit) {
              graphics.setColor(Color.red);
            }
            graphics.drawOval((r.vStreet.placement - 2) * 5, (r.hStreet.placement - 2) * 5, 3, 3);
            graphics.drawString(r.numberOfBikes + "/" + r.limit, (r.vStreet.placement - 8) * 5, (r.hStreet.placement - 3) * 5);
          }
          if (r.quadrant == 3) {
            if (r.numberOfBikes < 0 || r.numberOfBikes > r.limit) {
              graphics.setColor(Color.red);
            }
            graphics.drawOval((r.vStreet.placement - 2) * 5, (r.hStreet.placement + 2) * 5, 3, 3);
            graphics.drawString(r.numberOfBikes + "/" + r.limit, (r.vStreet.placement - 8) * 5, (r.hStreet.placement + 6) * 5);
          }
          if (r.quadrant == 4) {
            if (r.numberOfBikes < 0 || r.numberOfBikes > r.limit) {
              graphics.setColor(Color.red);
            }
            graphics.drawOval((r.vStreet.placement + 2) * 5, (r.hStreet.placement + 2) * 5, 3, 3);
            graphics.drawString(r.numberOfBikes + "/" + r.limit, (r.vStreet.placement + 3) * 5, (r.hStreet.placement + 6) * 5);

          }
          String sDay = "Sunday";
          String sTime = "Evening";
          if (day == 1) {
            sDay = "Monday";
          }
          if (day == 2) {
            sDay = "Tuesday";
          }
          if (day == 3) {
            sDay = "Wednesday";
          }
          if (day == 4) {
            sDay = "Thursday";
          }
          if (day == 5) {
            sDay = "Friday";
          }
          if (day == 6) {
            sDay = "Saturday";
          }
          if (time == 0) {
            sTime = "Night";
          }
          if (time == 4) {
            sTime = "Early Morning";
          }
          if (time == 8) {
            sTime = "Morning";
          }
          if (time == 12) {
            sTime = "Midday";
          }
          if (time == 16) {
            sTime = "Afternoon";
          }
          graphics.setColor(Color.black);
          graphics.drawString(sDay + ", " + sTime, 300, 20);
        }
      }
    }
  };

  private JButton button = new JButton("Next");

  private ActionEvent executeMovements() {
    iterate = true;
    for (Valdor.Movement m : movements) {
      if (m.dayOfWeek == day && m.timeSlot == time) {
        if (m instanceof Valdor.MemberMovement) {
          m.source.numberOfBikes = m.source.numberOfBikes - m.numberOfBikes;
          m.target.numberOfBikes = m.target.numberOfBikes + m.numberOfBikes;
        }
        if (m instanceof Valdor.Redistribution) {
          m.source.numberOfBikes = m.source.numberOfBikes - m.numberOfBikes;
          m.target.numberOfBikes = m.target.numberOfBikes + m.numberOfBikes;
        }
        if (m instanceof Valdor.RandomMovement) {
          double upper = m.numberOfBikes * 1.5;
          double lower = m.numberOfBikes * 0.5;
          double diff = upper - lower;
          int ran = (int) ((Math.random() * diff) + lower);
          m.source.numberOfBikes = m.source.numberOfBikes - ran;
          m.target.numberOfBikes = m.target.numberOfBikes + ran;

        }
      }
    }
    panel.repaint();
    resetTime();
    return null;
  }

  public void resetTime() {
    int currDay = nextDay();
    boolean sameDay = false;
    if (currDay == day) {
      sameDay = true;
    }
    day = currDay;
    time = nextTimeSlot(sameDay);
  }
  public int nextDay() {
    for (int i = day; i <= 7; i++) {
      for (Valdor.Movement m : movements) {
        if (m.dayOfWeek == day && m.timeSlot > time) {
          return i;
        }
        if (m.dayOfWeek == i && i > day) {
          return i;
        }
      }
    }
    return 7;
  }
  public int nextTimeSlot(boolean sameDay) {
    if (sameDay) {
      for (int i = time + 4; i <= 20; i = i + 4) {
        for (Valdor.Movement m : movements) {
          if (m.dayOfWeek == day && m.timeSlot == i) {
            return i;
          }
        }
      }
    }
    if (!(sameDay)) {
      for (int i = day; i <= 7; i++) {
        for (int j = 0; j <= 20; j = j + 4) {
          for (Valdor.Movement m : movements) {
            if (m.dayOfWeek == i && m.timeSlot == j) {
              return j;
            }
          }
        }
      }
    }
    return 20;
  }

  private class Member {
    public int ID;
    public String name;
    public Member(int pID, String pName) {
      this.ID = pID;
      this.name = pName;
    }
  }
  private abstract class Movement {
    public int dayOfWeek;
    public int timeSlot;
    public int numberOfBikes;
    public Valdor.BikeRack target;
    public Valdor.BikeRack source;
  }
  private class MemberMovement extends Valdor.Movement {
    public Valdor.Member member;
    public MemberMovement(Valdor.Member pM, int pDay, int pTime, int pNum, Valdor.BikeRack pSource, Valdor.BikeRack pTarget) {
      this.member = pM;
      this.dayOfWeek = pDay;
      this.timeSlot = pTime;
      this.numberOfBikes = pNum;
      this.target = pTarget;
      this.source = pSource;
    }

  }
  private class RandomMovement extends Valdor.Movement {
    private RandomMovement(int pDay, int pTime, int pNum, Valdor.BikeRack pSource, Valdor.BikeRack pTarget) {
      this.dayOfWeek = pDay;
      this.timeSlot = pTime;
      this.numberOfBikes = pNum;
      this.source = pSource;
      this.target = pTarget;
    }

  }
  private class Redistribution extends Valdor.Movement {
    private Redistribution(int pDay, int pTime, int pNum, Valdor.BikeRack pSource, Valdor.BikeRack pTarget) {
      this.dayOfWeek = pDay;
      this.timeSlot = pTime;
      this.numberOfBikes = pNum;
      this.source = pSource;
      this.target = pTarget;
    }
  }
  private class BikeRack {
    public int numberOfBikes;
    public int limit;
    public int quadrant;
    public Valdor.Street hStreet;
    public Valdor.Street vStreet;
    public BikeRack(int pNum, int pLim, int pQuad, Valdor.Street pH, Valdor.Street pV) {
      this.numberOfBikes = pNum;
      this.limit = pLim;
      this.quadrant = pQuad;
      this.hStreet = pH;
      this.vStreet = pV;
    }
  }
  private class Street {
    public String name;
    public int placement;
    public Street(String pName, int pPlace) {
      this.name = pName;
      this.placement = pPlace;
    }
  }

}
